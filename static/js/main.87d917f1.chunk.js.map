{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Charts","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","responsive","legend","display","title","text","scales","yAxes","ticks","fontSize","fontFamily","fontColor","fontStyle","xAxes","gridLines","drawBorder","lineChart","borderColor","fill","hoverRadius","Countries","handleCountryChange","setCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","CountryPicker","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87d917f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    if (!confirmed) {\n      return 'Loading...';\n    }\n\n    return(\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n            <Grid xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                        <Typography variant=\"h5\"> <CountUp start={0} end={confirmed.value} duration={1} separator=\",\" /> </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of active cases of COVID-19.</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h5\"> <CountUp start={0} end={recovered.value} duration={1} separator=\",\" /> </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\"> Number of recoveries from COVID-19.</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h5\"> <CountUp start={0} end={deaths.value} duration={1} separator=\",\" /> </Typography>\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19.</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(`${url}/daily`);\n\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n\n    return countries.map((country) => country.name);\n  } catch (error) {\n    return error;\n  }\n};","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Charts.module.css';\n\n\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState({});\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n  \n  const barChart = (\n    confirmed ? (\n      <Bar\n        data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [\n            {\n              label: 'People',\n              backgroundColor: ['rgba(255,7,58,.6)', 'rgba(40,167,69, 0.6)', 'rgba(108,117,125, 0.6)'],\n              data: [confirmed.value, recovered.value, deaths.value],\n            },\n          ],\n        }}\n        options={{\n            responsive: true,\n            legend: { display: false },\n            title: { display: true, text: `Current state in ${country}` },\n            scales: {\n                yAxes: [{ticks: {fontSize: 12, fontFamily: \"'Roboto Condensed', sans-serif\", fontColor: '#000', fontStyle: '500'}}],\n                xAxes: [{ticks: {fontSize: 12, fontFamily: \"'Roboto Condensed', sans-serif\", fontColor: '#000', fontStyle: '500'}, gridLines: {\n                    display: false,\n                    drawBorder: false\n                }}]\n                },\n        }}\n      />\n    ) : null\n  );\n\n  const lineChart = (\n    dailyData[0] ? (\n      <Line\n        data={{\n          labels: dailyData.map(({ date }) => date),\n          datasets: [{\n            data: dailyData.map((data) => data.confirmed),\n            label: 'Infected',\n            borderColor: 'rgba(255,7,58)',\n            fill: false,\n            backgroundColor: 'rgba(255,7,58)',\n            hoverRadius: 5,\n          }, {\n            data: dailyData.map((data) => data.deaths),\n            label: 'Deaths',\n            borderColor: 'rgba(108,117,125)',\n            fill: false,\n            backgroundColor: 'rgba(108,117,125)',\n            hoverRadius: 5,\n          },\n          ],\n        }}\n        options={{\n            responsive: true,\n            legend: { display: true },\n            scales: {\n                yAxes: [{ticks: {fontSize: 12, fontFamily: \"'Roboto Condensed', sans-serif\", fontColor: '#000', fontStyle: '500'}}],\n                xAxes: [{ticks: {fontSize: 12, fontFamily: \"'Roboto Condensed', sans-serif\", fontColor: '#000', fontStyle: '500'},gridLines: {\n                    display: false,\n                    drawBorder: false,\n                }}]\n                },\n        }}\n      />\n    ) : null\n  );\n\n\n  return (\n    <div className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  );\n};\n\nexport default Charts;","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst Countries = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\" >Global</option>\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default Countries;","import React from 'react';\nimport { Cards, Charts, CountryPicker} from './components';\n \nimport styles from './App.module.css';\nimport { fetchData } from './api';\n\nclass App extends React.Component {\n    state = {\n      data: {},\n      country: '',\n    }\n  \n    async componentDidMount() {\n      const data = await fetchData();\n      this.setState({ data });\n    }\n  \n    handleCountryChange = async (country) => {\n      const data = await fetchData(country);\n  \n      this.setState({ data, country: country });\n    }\n  \n    render() {\n      const { data, country } = this.state;\n  \n      return (\n        <div className={styles.container}>\n        <h1>COVID-19 Tracker</h1>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Charts data={data} country={country} /> \n        </div>\n      );\n    }\n  }\n\n  export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}